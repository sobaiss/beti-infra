AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Beti Infra stack

Parameters:
  AccountAlias:
    Type: String
    Description: The Account Alias
  ProjectName:
    Type: String
    Default: beti-infra
  Stage:
    Type: String
    Description: The stage name
    AllowedPattern: '^[a-zA-Z0-9]+(-[a-z]{2})?$'
    AllowedValues:
      - dev
      - test
      - prod
  VPCCIDR:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC.
  PublicSubnetCIDR:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR block for the Public Subnet.
  PrivateSubnetCIDR:
    Type: String
    Default: 10.0.2.0/24
    Description: CIDR block for the Private Subnet.

Resources:
  # ------------------------------------------------------------------
  # 1. VPC, Internet Gateway, and Route Tables
  # ------------------------------------------------------------------
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Stage}-vpc"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Stage}-igw"

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Stage}-rt-public"

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway # Ensure IGW is attached first
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0 # Route all traffic to the Internet Gateway
      GatewayId: !Ref InternetGateway

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Stage}-rt-private"

  # ------------------------------------------------------------------
  # 2. Subnets
  # ------------------------------------------------------------------
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCIDR
      MapPublicIpOnLaunch: 'true' # Instances here will get a public IP
      AvailabilityZone: !Sub "${AWS::Region}a" # !Select [ "0", !GetAZs !Ref "AWS::Region" ] # Use first AZ in eu-west-1
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Stage}-subnet-public"

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCIDR
      AvailabilityZone: !Sub "${AWS::Region}a" # !Select [ "0", !GetAZs !Ref "AWS::Region" ] # Use first AZ in eu-west-1
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Stage}-subnet-private"

  # Associate Route Tables with Subnets
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable
      
  # ------------------------------------------------------------------
  # 3. Security Group (SG) - Controls traffic to instances/resources
  # ------------------------------------------------------------------
  # A general Security Group that allows internal traffic.
  DefaultSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows SSH from Public and All traffic from VPC internal
      VpcId: !Ref VPC
      SecurityGroupIngress:
        # Allow all traffic from the VPC CIDR (i.e., from public to private subnet)
        - IpProtocol: -1
          CidrIp: !Ref VPCCIDR
        # Example: Allow SSH from anywhere (0.0.0.0/0) - BE CAREFUL with this in production
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Stage}-sg-default"

  # ------------------------------------------------------------------
  # 4. Network Access Control List (NACL) - Controls traffic to Subnets
  # ------------------------------------------------------------------
  # NACL is attached to the VPC by default, but we customize it.
  DefaultNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Stage}-nacl-default"

  # Associate NACL with Subnets
  PublicSubnetNACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      NetworkAclId: !Ref DefaultNACL
      
  PrivateSubnetNACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      NetworkAclId: !Ref DefaultNACL

  # NACL Rules (Default is to deny everything implicitly, we add explicit Allow rules)
  # Inbound Rule (Allow all traffic from the VPC CIDR for testing purposes)
  NACLInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DefaultNACL
      RuleNumber: 100
      Protocol: -1 # All protocols
      RuleAction: allow
      CidrBlock: !Ref VPCCIDR # Allow internal VPC communication
      Egress: 'false'
      
  # Outbound Rule (Allow all outbound traffic)
  NACLOutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref DefaultNACL
      RuleNumber: 100
      Protocol: -1 # All protocols
      RuleAction: allow
      CidrBlock: 0.0.0.0/0 # Allow all outbound traffic
      Egress: 'true'
  # ------------------------------------------------------------------
  # DynamoDB Tables
  # ------------------------------------------------------------------
  LocationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "locations-${Stage}"
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: divisionName
          AttributeType: S
        - AttributeName: name
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: divisionName-name-index
          KeySchema:
            - AttributeName: divisionName
              KeyType: HASH
            - AttributeName: name
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
  # ------------------------------------------------------------------
  # S3 buckets
  # ------------------------------------------------------------------
  PublicBucket:
    Type: AWS::S3::Bucket
    #UpdateReplacePolicy: Retain
    #DeletionPolicy: Retain
    Properties:
      VersioningConfiguration:
        Status: Suspended
      BucketName: !Sub "${ProjectName}-${Stage}-public-bucket"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Stage}-public-bucket"
        - Key: Project
          Value: !Ref ProjectName
  TempBucket:
    Type: AWS::S3::Bucket
    #UpdateReplacePolicy: Retain
    #DeletionPolicy: Retain
    Properties:
      VersioningConfiguration:
        Status: Suspended
      BucketName: !Sub "${ProjectName}-${Stage}-temp-bucket"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Stage}-temp-bucket"
        - Key: Project
          Value: !Ref ProjectName
  # ------------------------------------------------------------------
  # Policies
  # ------------------------------------------------------------------
  ReadAndWriteBucketPublicPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    # DeletionPolicy: Retain
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 's3:ListBucket'
              - 's3:ListObjects'
              - 's3:ListObjectsV2'
              - 's3:HeadObject'
              - 's3:GetObject'
              - 's3:PutObject'
              - 's3:DeleteObject'
              - 's3:DeleteObjectVersion'
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:s3:::${ProjectName}-${Stage}-public-bucket'
              - !Sub 'arn:aws:s3:::${ProjectName}-${Stage}-public-bucket/*'
              - !Sub 'arn:aws:s3:::${ProjectName}-${Stage}-temp-bucket'
              - !Sub 'arn:aws:s3:::${ProjectName}-${Stage}-temp-bucket/*'

  ReadBucketPublicPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    # DeletionPolicy: Retain
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 's3:ListBucket'
              - 's3:ListObjects'
              - 's3:ListObjectsV2'
              - 's3:HeadObject'
              - 's3:GetObject'
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:s3:::${ProjectName}-${Stage}-public-bucket'
              - !Sub 'arn:aws:s3:::${ProjectName}-${Stage}-public-bucket/*'
              - !Sub 'arn:aws:s3:::${ProjectName}-${Stage}-temp-bucket'
              - !Sub 'arn:aws:s3:::${ProjectName}-${Stage}-temp-bucket/*'
###### Parameters written out
Outputs:
  VPCId:
    Description: "VPC ID"
    Value: !Ref VPC
    Export:
      Name: !Sub '${ProjectName}-${Stage}-vpc'
  PublicSubnetId:
    Description: "Public Subnet ID"
    Value: !Ref PublicSubnet
    Export:
      Name: !Sub '${ProjectName}-${Stage}-subnet-public'
  PrivateSubnetId:
    Description: "Private Subnet ID"
    Value: !Ref PrivateSubnet
    Export:
      Name: !Sub '${ProjectName}-${Stage}-vpc-subnet-private'
  DefaultSecurityGroupId:
    Description: "Default Security Group ID"
    Value: !Ref DefaultSecurityGroup
    Export:
      Name: !Sub '${ProjectName}-${Stage}-sg-default'
  LocationsTable:
    Description: "Locations DynamoDB Table"
    Value: !Ref LocationsTable
    Export:
      Name: !Sub "${ProjectName}-${Stage}-dynamodb-locations"
  PublicBucketName:
    Description: "S3 Public Bucket Name"
    Value: !Sub "${ProjectName}-${Stage}-public-bucket"
    Export:
      Name: !Sub "${ProjectName}-${Stage}-public-bucket"
  TempBucketName:
    Description: "S3 Temp Bucket Name"
    Value: !Sub "${ProjectName}-${Stage}-temp-bucket"
    Export:
      Name: !Sub "${ProjectName}-${Stage}-temp-bucket"
  ReadAndWriteBucketPublicPolicy:
    Description: "IAM Managed Policy for Read and Write Access to S3 Buckets"
    Value: !Ref ReadAndWriteBucketPublicPolicy
    Export:
      Name: !Sub "${ProjectName}-${Stage}-policy-read-write-buckets"
  ReadBucketPublicPolicy:
    Description: "IAM Managed Policy for Read Access to S3 Buckets"
    Value: !Ref ReadBucketPublicPolicy
    Export:
      Name: !Sub "${ProjectName}-${Stage}-policy-read-buckets"
